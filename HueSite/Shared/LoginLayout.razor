@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> userManager
@inject NavigationManager navManager


<div class="AuthBody">
    <AuthorizeView>
        <Authorized>
            <div class="authorize-pop-up @ClassState">@SecretState</div>
            <div class="authorize-container">
                <div class="authorize-text">
                    @context.User.Identity.Name you're not authorized to this website right now, contact administrator for more information or use secret code
                </div>
                <div class="authorize-code">
                    <form method="post" action="Identity/Account/Logout">
                        <button type="submit" class="Clear-Button action-button authorize-buttons"><i class="fas fa-sign-out-alt"></i> Log out</button>
                    </form>
                    <button class="Clear-Button action-button authorize-buttons" @onclick="CheckCode">Check Code</button>
                    <input class="input-blackbg" type="text" @bind="SecretCode" placeholder="SecretCode" />
                </div>
            </div>
        </Authorized>
        <NotAuthorized>

            <a href="Identity/Account/Register">
                <div class="AuthTiles">Register</div>
            </a>

            <a href="Identity/Account/Login">
                <div class="AuthTiles">Log in</div>
            </a>

        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    string SecretCode = "";
    string SecretState = "";
    string ClassState = "";
    AppUser user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var auth = await AuthState;
            var preUser = auth.User;
            user = await userManager.FindByNameAsync(preUser.Identity.Name);
        }
        catch { }
    }

    async Task CheckCode()
    {
        if (SecretCode == "1010")
        {
            await Task.Run(async () =>
            {
                var result = await userManager.AddToRoleAsync(user, "scu");
                SecretState = "Your role has been assigned! Please log in again";
                ClassState = "Good";
                await InvokeAsync(StateHasChanged);
                navManager.NavigateTo("/");
            });
        }

        else
        {
            await Task.Run(async () =>
            {
                SecretState = "That code didn't work!";
                ClassState = "Bad";
                await Task.Delay(1500);
                await InvokeAsync(StateHasChanged);
            });

        }
    }

}
