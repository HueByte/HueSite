@using HueSite.Data.IServices
@using Microsoft.AspNetCore.Identity;
@using HueSite.Data
@using HueSite.Data.Models
@using Microsoft.EntityFrameworkCore
@inject UserManager<AppUser> userManager



<AuthorizeView>
    <Authorized>
        <div class="user-container @isCollapsedUser">
            <div class="user-button-closer"><i class="fa fa-close pointer" @onclick="UserToggle"></i></div>

            @if (user != null)
            {
                <div class="user-container-item-container">
                    <div class="user-container-item user">
                        @user.Nickname
                        @user.Email
                    </div>
                    <form method="post" action="Identity/Account/Logout">
                        <button type="submit" class="btn user-container-item" style="text-align: left;width: 100%;"><i class="fas fa-sign-out-alt"></i> Log out</button>
                    </form>
                    <NavLink href="Identity/Account/Manage">
                        <div class="user-container-item">
                            <i class="fa fa-tasks" aria-hidden="true"></i>
                            Manage
                        </div>
                    </NavLink>
                </div>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
        <div class="user-button" @onclick="UserToggle"><i class="fa fa-user"></i></div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    AppUser user;

    bool collapseUser = true;
    bool FirstDownloadUser = true;
    string isCollapsedUser = "";

    async Task UserToggle()
    {
        collapseUser = !collapseUser;
        isCollapsedUser = collapseUser ? "" : "NoCollapse";

        if (FirstDownloadUser)
        {
            FirstDownloadUser = !FirstDownloadUser;
            var authState = await authenticationState;
            var preUser = authState.User;
            user = await userManager.FindByNameAsync(preUser.Identity.Name);
            StateHasChanged();
        }
    }

}
